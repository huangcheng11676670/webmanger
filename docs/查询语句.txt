查询语句

================================
              字段对应的类型的，契约值在下面找
================================
com.jspxcms.common.orm.SearchFilter
public enum Type {
String, Integer, Long, Float, Double, BigDecimal, BigInteger, Boolean, Date, Timestamp;

================================
                         查询比较符号
================================
case EQ:
    predicates.add(builder.equal(exp, filter.value[0]));
    break;
case LIKE:
    predicates.add(builder.like(exp,
            filter.value[0].toString()));
    break;
case CONTAIN:
    predicates.add(builder.like(exp, "%"
            + filter.value[0] + "%"));
    break;
case STARTWITH:
    predicates.add(builder.like(exp, filter.value[0]
            + "%"));
    break;
case ENDWITH:
    predicates.add(builder.like(exp, "%"
            + filter.value[0]));
    break;
case GT:
    predicates.add(builder.greaterThan(exp,
            (Comparable) filter.value[0]));
    break;
case LT:
    predicates.add(builder.lessThan(exp,
            (Comparable) filter.value[0]));
    break;
case GTE:
    predicates.add(builder.greaterThanOrEqualTo(exp,
            (Comparable) filter.value[0]));
    break;
case LTE:
    predicates.add(builder.lessThanOrEqualTo(exp,
            (Comparable) filter.value[0]));
    break;
case IN:
    predicates.add(exp.in(filter.value));
    break;
}
================================
                   例如jsp语句分析:
================================
<div class="form-group">
<select class="form-control input-sm" id="search_EQ_clearance_Boolean" name="search_EQ_clearance_Boolean">
    <option value=""><s:message code="allSelect"/></option>
    <option <c:if test="${search_EQ_clearance_Boolean[0]}"> selected="selected"</c:if> value="true">已回款</option>
    <option <c:if test="${!search_EQ_clearance_Boolean[0]}"> selected="selected"</c:if> value="false">未回款</option>
</select>
</div>

name="search_EQ_clearance_Boolean"
分成
search   查询语句前缀
EQ   查询比较符号
clearance 查询字段对应域对象模型字段值
Boolean 查询字段类型

================================
                   对象查询
================================
<label for="search_EQ_JuserRoles.role.id"><s:message code="user.role"/></label>
<select class="form-control input-sm" id="search_EQ_JuserRoles.role.id" name="search_EQ_JuserRoles.role.id">
    <option value=""><s:message code="allSelect"/></option>
    <c:forEach var="role" items="${roleList}">
		<option value="${role.id}"<c:if test="${role.id eq requestScope['search_EQ_JuserRoles.role.id'][0]}"> selected="selected"</c:if>>${role.name}</option>
    </c:forEach>
</select>


================================
SpringDataJpa的Specification查询
================================
spring data jpa 通过创建方法名来做查询，只能做简单的查询，那如果我们要做复杂一些的查询呢，
多条件分页怎么办，这里，spring data jpa为我们提供了JpaSpecificationExecutor接口，
只要简单实现toPredicate方法就可以实现复杂的查询

其中Specification就是需要我们传进去的参数，它是一个接口

Specification<Sentiment> sp = new Specification<Sentiment>() {

       @Override
        public Predicate toPredicate(Root<Task> root, CriteriaQuery<?> query, CriteriaBuilder cb) {

     //1.混合条件查询
          /*Path<String> exp1 = root.get("taskName");
            Path<Date>  exp2 = root.get("createTime");
            Path<String> exp3 = root.get("taskDetail");
            Predicate predicate = cb.and(cb.like(exp1, "%taskName%"),cb.lessThan(exp2, new Date()));
            return cb.or(predicate,cb.equal(exp3, "kkk"));

            类似的sql语句为:
            Hibernate: 
                select
                    count(task0_.id) as col_0_0_ 
                from
                    tb_task task0_ 
                where
                    (
                        task0_.task_name like ?
                    ) 
                    and task0_.create_time<? 
                    or task0_.task_detail=?
            */

    //2.多表查询
        /*Join<Task,Project> join = root.join("project", JoinType.INNER);
            Path<String> exp4 = join.get("projectName");
            return cb.like(exp4, "%projectName%");

            Hibernate: 
            select
                count(task0_.id) as col_0_0_ 
            from
                tb_task task0_ 
            inner join
                tb_project project1_ 
                    on task0_.project_id=project1_.id 
            where
                project1_.project_name like ?*/ 
           return null ;  
        }
    }
}